#!/usr/bin/env python
# coding: utf-8

# In[ ]:


from sklearn import datasets
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
import numpy as np 


# In[ ]:


iris= datasets.load_iris()
X_train, X_test,y_train,y_test=train_test_split(iris.data, iris.target)


# In[ ]:


#print(X_train)
#print(iris)
print("\n Target :\n",iris["target"]) 
print("\n X TRAIN \n", X_train) 
print("\n X TEST \n", X_test) 
print("\n Y TRAIN \n", y_train) 
print("\n Y TEST \n", y_test) 


# In[ ]:


model= KNeighborsClassifier(n_neighbors=5)
model.fit(X_train,y_train)


# In[ ]:


x_new = np.array([ [6.2, 2.9, 4.3, 1.3]]) 
print("\n XNEW \n",x_new)     
prediction = model.predict(x_new)   
print("\n Predicted target value: {}\n".format(prediction)) 
print("\n Predicted feature name: {}\n".format(iris["target_names"][prediction]))

i=1 
x= X_test[i] 
x_new = np.array([x]) 
print("\n XNEW \n",x_new)

for i in range(len(X_test)):
     x = X_test[i]     
     x_new = np.array([x])     
     prediction = model.predict(x_new)     
     print("\n Actual : {0} {1}, Predicted :{2}{3}".format(y_test[i],iris["target_names"][y_test[i]],prediction,iris["target_names"][ prediction])) 
print("\n TEST SCORE[ACCURACY]: {:.2f}\n".format(model.score(X_test, y_test)))   


# In[ ]:


'''model.score
print(model.score)
metrics.accuracy_score(y_test, model.predict(X_test)))'''


# In[ ]:




